<div class="container-fluid">
	<div id="main" class="container-fluid">
		<div id="subNav">
			<h3 class="bold">A*アルゴリズム</h3>
			<p>最短経路を求めるアルゴリズム</p>
			<p>A*（エースター）アルゴリズムはダイクストラ法を一般化したもので、処理の流れはダイクストラ法とほとんど同じ。違うのは、「ヒューリスティック関数」と呼ばれる推定値を用いる点。各頂点から目的地まで「最低でもこのくらい離れている」という推定を行うことで、探索に大まかな方向性を持たせることができ、効率的に計算できる。推定値を0にすれば、ダイクストラ法になる。</p>
		</div>
	</div><!-- /main -->
	<br>
	<br>
  <!-- tab -->
  <div class="tabbale">
    <div id="content">
      <ul class="nav nav-tabs">
      <li class="active"><a href="#">アルゴリズムの解説</a></li>
      <li><a href="" style="color:#000000;pointer-events:none;"></a></li>
      </ul>
     </div>
   </div> <!-- container -->
   <br>


	<div id="editor" class="avoid-clicks" style="height: 450px">//初期化
 各頂点について
  S（スコア） （→スタート地点からの距離）
  H（推定値） （→ゴールまでの推定距離）
  直前の頂点 （→どこから来たか）
  処理済みか （→true/false）
 スタート地点のスコア＝0

//処理
 while 未処理の頂点がある
	現在位置 = (スコア＋推定値) が最小の頂点
	現在位置がゴールなら終了

	for each 隣接点
	  暫定スコア = 現在位置のスコア
				   +隣接点までの距離
	 
	 if 隣接点のスコア &gt; 暫定スコア
	   隣接点のスコア = 暫定スコア
	   隣接点の直前の頂点 = 現在位置

	 現在位置を処理済みにする
 終了
	</div><!-- /editor -->

	<div id="anime">
		<p>画面クリックで説明</p>
		<canvas width="550" height="450" id="sample">
			図形を表示するには、canvasタグをサポートしたブラウザが必要です。
		</canvas>
	</div><!-- /anime -->
</div><!-- /container -->
<script src="/js/src-min/ace.js"></script>
<script>
  var editor = ace.edit("editor");
  editor.renderer.setShowGutter(false);
  //editor.$blockScrolling = Infinity;
  editor.setOptions({
  	highlightActiveLine:false
  	//enableBasicAutocompletion: true,
    //enableSnippets: true,
    //_enableLiveAutocompletion: true
  });
  editor.setTheme("ace/theme/monokai");//clouds,monokai,chrome
  editor.getSession().setMode("ace/mode/javascript");
    document.getElementById('editor').style.visibility="visible";
</script>
<script src='/js/a_star.js'></script>